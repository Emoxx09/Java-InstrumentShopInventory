/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package instrumentshopinventory;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Flinchy
 */
public class DamagedMan extends javax.swing.JFrame {

    /**
     * Creates new form DamagedMan
     */
    public DamagedMan() throws FileNotFoundException {
        initComponents();
        showProd();
        showProdID();
        showitem();
        
        pieces.addKeyListener(new KeyAdapter() {
               public void keyTyped(KeyEvent e) {
                   char c = e.getKeyChar();
                   if (!((c >= '0') && (c <= '9') ||
                           (c == KeyEvent.VK_BACK_SPACE) ||
                           (c == KeyEvent.VK_DELETE))) {
                       getToolkit().beep();
                       e.consume();
                   }
               }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ProdIDSelect = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        BrandName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        pieces = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        ProdNameSelect = new javax.swing.JComboBox<>();
        BrandSelect = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        pieces1 = new javax.swing.JTextField();
        Add1 = new javax.swing.JButton();
        BrandName1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        ProdNameSelect1 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        ProdIDSelect1 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        home = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Damaged/Replacement Management");

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("ADD DAMAGED ITEM");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Product ID");

        ProdIDSelect.setBackground(new java.awt.Color(51, 51, 51));
        ProdIDSelect.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        ProdIDSelect.setForeground(new java.awt.Color(255, 255, 255));
        ProdIDSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Product" }));
        ProdIDSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdIDSelectActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Brand");

        BrandName.setBackground(new java.awt.Color(51, 51, 51));
        BrandName.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        BrandName.setForeground(new java.awt.Color(255, 255, 255));
        BrandName.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("# of Damaged Pieces");

        pieces.setBackground(new java.awt.Color(51, 51, 51));
        pieces.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        pieces.setForeground(new java.awt.Color(255, 255, 255));

        Add.setBackground(new java.awt.Color(51, 51, 51));
        Add.setForeground(new java.awt.Color(255, 255, 255));
        Add.setText("ADD");
        Add.setToolTipText("");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Product Name");

        ProdNameSelect.setBackground(new java.awt.Color(51, 51, 51));
        ProdNameSelect.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        ProdNameSelect.setForeground(new java.awt.Color(255, 255, 255));
        ProdNameSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Name" }));
        ProdNameSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdNameSelectActionPerformed(evt);
            }
        });

        BrandSelect.setBackground(new java.awt.Color(51, 51, 51));
        BrandSelect.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        BrandSelect.setForeground(new java.awt.Color(255, 255, 255));
        BrandSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Brand" }));
        BrandSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrandSelectActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("SHOW");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        table.setBackground(new java.awt.Color(51, 51, 51));
        table.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        table.setForeground(new java.awt.Color(255, 255, 255));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Name", "Stock", "Damaged Pieces", "Replaced Pieces"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("# of Replaced Pieces");

        pieces1.setBackground(new java.awt.Color(51, 51, 51));
        pieces1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        pieces1.setForeground(new java.awt.Color(255, 255, 255));

        Add1.setBackground(new java.awt.Color(51, 51, 51));
        Add1.setForeground(new java.awt.Color(255, 255, 255));
        Add1.setText("ADD");
        Add1.setToolTipText("");
        Add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add1ActionPerformed(evt);
            }
        });

        BrandName1.setBackground(new java.awt.Color(51, 51, 51));
        BrandName1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        BrandName1.setForeground(new java.awt.Color(255, 255, 255));
        BrandName1.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Brand");

        ProdNameSelect1.setBackground(new java.awt.Color(51, 51, 51));
        ProdNameSelect1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        ProdNameSelect1.setForeground(new java.awt.Color(255, 255, 255));
        ProdNameSelect1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Name" }));
        ProdNameSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdNameSelect1ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Product Name");

        ProdIDSelect1.setBackground(new java.awt.Color(51, 51, 51));
        ProdIDSelect1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        ProdIDSelect1.setForeground(new java.awt.Color(255, 255, 255));
        ProdIDSelect1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Product" }));
        ProdIDSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdIDSelect1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Product ID");

        jLabel17.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("REPLACE DAMAGED ITEM/S");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(320, 3));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        home.setBackground(new java.awt.Color(51, 51, 51));
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setText("HOME");
        home.setToolTipText("");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addComponent(jLabel10))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(BrandName)
                                .addComponent(Add, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ProdIDSelect, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pieces, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ProdNameSelect, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel17))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(BrandName1)
                                    .addComponent(Add1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProdIDSelect1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pieces1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProdNameSelect1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(home))
                        .addGap(8, 8, 8)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(BrandSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addContainerGap(477, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BrandSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdIDSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(ProdNameSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(BrandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pieces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Add)
                        .addGap(21, 21, 21)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdIDSelect1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(ProdNameSelect1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(BrandName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pieces1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Add1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(home)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ProdIDSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdIDSelectActionPerformed
        try {
            ProdNameSelect.setSelectedItem(ProdNameCheck());
            BrandName.setText(brandCheck());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ProdIDSelectActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        try {
            int continuer = 1;
            if (ProdIDSelect.getSelectedItem().equals("Select Product") | ProdNameSelect.getSelectedItem().equals("Select Name") 
                    | pieces.getText().equals("") | BrandName.getText().equals("")){
                continuer = 0;
            }
            if (continuer == 1){
                addDamagedItem();
                JOptionPane.showMessageDialog(null, "Damaged Items Added!");
            }
            else{
                JOptionPane.showMessageDialog(null, "There seems to be missing fields!");
            }
        } catch (IOException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddActionPerformed

    private void ProdNameSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdNameSelectActionPerformed
        try {
            // TODO add your handling code here:
            ProdIDSelect.setSelectedItem(ProdIDCheck());
            BrandName.setText(brandCheck());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ProdNameSelectActionPerformed

    private void BrandSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrandSelectActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_BrandSelectActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (BrandSelect.getSelectedItem().equals("Select Brand")){
            JOptionPane.showMessageDialog(null, "Please choose a brand!");
        }
        else{
            showStocks();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void Add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add1ActionPerformed
        try {
            // TODO add your handling code here:
            int continuer = 1;
            if (ProdIDSelect1.getSelectedItem().equals("Select Product") | ProdNameSelect1.getSelectedItem().equals("Select Name") 
                    | pieces1.getText().equals("") | BrandName1.getText().equals("")){
                continuer = 0;
            }
            if (continuer ==1){
                addReplacedItem();
                JOptionPane.showMessageDialog(null, "Damaged Items Replaced!");
            }
            else{
                JOptionPane.showMessageDialog(null, "There seems to be missing fields!");
            }
        } catch (IOException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Add1ActionPerformed

    private void ProdNameSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdNameSelect1ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            ProdIDSelect1.setSelectedItem(ProdIDCheck1());
            BrandName1.setText(brandCheck1());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ProdNameSelect1ActionPerformed

    private void ProdIDSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdIDSelect1ActionPerformed
        // TODO add your handling code here:
        try {
            ProdNameSelect1.setSelectedItem(ProdNameCheck1());
            BrandName1.setText(brandCheck1());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ProdIDSelect1ActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        try {
            // TODO add your handling code here:
            home();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_homeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DamagedMan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DamagedMan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DamagedMan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DamagedMan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new DamagedMan().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DamagedMan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void showProdID() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (line.equals("")) {
                continue;
            }
            Scanner lineinput = new Scanner (line);
            String id = lineinput.next();
            ProdIDSelect.addItem(id);
            ProdIDSelect1.addItem(id);
        }
        sc.close();
    }
    
    public void showProd() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (line.equals("")) {
                continue;
            }
            Scanner lineinput = new Scanner (line);
            String id = lineinput.next();
            String name = lineinput.next();
            ProdNameSelect.addItem(name);
            ProdNameSelect1.addItem(name);
        }
        sc.close();
    }
    
    public String ProdIDCheck() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String finalID = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect.getSelectedItem())){
               finalID = id;
            }
        }
        
        return finalID;
    }
    public String ProdIDCheck1() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String finalID = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect1.getSelectedItem())){
               finalID = id;
            }
        }
        
        return finalID;
    }
    
    public String ProdNameCheck() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String finalName = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (id.equals(ProdIDSelect.getSelectedItem())){
               finalName = name;
            }
        }
        
        return finalName;
    }
    
    public String ProdNameCheck1() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String finalName = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (id.equals(ProdIDSelect1.getSelectedItem())){
               finalName = name;
            }
        }
        
        return finalName;
    }
    
    public String brandCheck() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String finalBr = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect.getSelectedItem())){
               finalBr = brand;
            }
        }
        
        return finalBr;
    }
    public String brandCheck1() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String finalBr = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect1.getSelectedItem())){
               finalBr = brand;
            }
        }
        
        return finalBr;
    }
    
    public void addDamagedItem() throws IOException{
        String linex = ProdIDSelect.getSelectedItem() + "\t" + ProdNameSelect.getSelectedItem() + "\t" + BrandName.getText()
                + "\t" + pieces.getText();
        Scanner scx = new Scanner (new FileReader ("src\\Storage.txt"));
        String contentx = "";
        while (scx.hasNextLine()){
            String line = scx.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect.getSelectedItem())){
                int damaged = getDamaged(id);
                stock = damaged + Integer.parseInt(pieces.getText());
                
            }
            String newline = id + "\t" + name + "\t" + brand + "\t" + stock;
            contentx = contentx + newline + "\n";
        }
        BufferedWriter bwx = new BufferedWriter (new FileWriter ("src\\Damaged.txt"));
        bwx.append(contentx);
        bwx.close();
        
        
        
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String content = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect.getSelectedItem())){
                
                stock = stock - Integer.parseInt(pieces.getText());
                
            }
            String newline = id + "\t" + name + "\t" + price + "\t" + stock + "\t" + brand;
            content = content + newline + "\n";
        }
        BufferedWriter bw1 = new BufferedWriter (new FileWriter ("src\\Storage.txt"));
        bw1.append(content);
        bw1.close();
    }
    
    public void addReplacedItem() throws IOException{
        String linex = ProdIDSelect1.getSelectedItem() + "\t" + ProdNameSelect1.getSelectedItem() + "\t" + BrandName1.getText()
                + "\t" + pieces1.getText();
        BufferedWriter bw = new BufferedWriter (new FileWriter ("src\\Replaced.txt", true));
        bw.append(linex + "\n");
        bw.close();
        
        Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
        String content = "";
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String price = linereader.next();
            int stock = linereader.nextInt();
            String brand = linereader.next();
            
            if (name.equals(ProdNameSelect1.getSelectedItem())){
                
                stock = stock + Integer.parseInt(pieces1.getText());
                
            }
            String newline = id + "\t" + name + "\t" + price + "\t" + stock + "\t" + brand;
            content = content + newline + "\n";
        }
        BufferedWriter bw1 = new BufferedWriter (new FileWriter ("src\\Storage.txt"));
        bw1.append(content);
        bw1.close();
        
        minusDamaged();
    }
    
    public void minusDamaged() throws FileNotFoundException, IOException{
        String content = "";
        Scanner sc = new Scanner (new FileReader("src\\Damaged.txt"));
        Scanner sc1 = new Scanner (new FileReader("src\\Replaced.txt"));
        
        while(sc1.hasNextLine()){
            String startingLine = "";
            int stocksLeft = 0;
            String line = sc1.nextLine();
            
            if (line.equals("")){
                continue;
            }
            
            Scanner linereader = new Scanner (line);
            String id = linereader.next();
            String name = linereader.next();
            String brand = linereader.next();
            int pieces = linereader.nextInt();
            
            while (sc.hasNextLine()){
                String line2 = sc.nextLine();
                
                if (line2.equals("")){
                continue;
                }
                Scanner linereader2 = new Scanner (line2);
                String id1 = linereader2.next();
                String name1 = linereader2.next();
                String brand1= linereader2.next();
                int stocks = linereader2.nextInt();
                
                
                if (id.equals(id1)){
                    stocksLeft = stocks - pieces;
                    startingLine = id1 + "\t"  + name1 + "\t"  +  brand1 + "\t"  + stocksLeft + "\n";
                }
                else{
                    startingLine = id1 + "\t"  + name1  + "\t" + brand1 + "\t"  + stocks + "\n";
                }
                content = content + startingLine;
                BufferedWriter bw = new BufferedWriter (new FileWriter ("src\\Damaged.txt"));
                bw.append(content);
                bw.close();
            }
        }
    }
    
    public void showitem() throws FileNotFoundException{
        Scanner sc = new Scanner (new FileReader ("src\\BrandNames.txt"));
        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (line.equals("")) {
                continue;
            }
            Scanner lineinput = new Scanner (line);
            String name = lineinput.nextLine();
            BrandSelect.addItem(name);
        }
        sc.close();
    }
    
    public void showStocks() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        try {
            Scanner sc = new Scanner (new FileReader ("src\\Storage.txt"));
            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                Scanner linereader = new Scanner (line);
                String a1 = linereader.next();
                String a2 = linereader.next();
                String a3 = linereader.next();
                String a4 = linereader.next();
                String a5 = linereader.next();
                if (line.equals("") || !a5.equals(BrandSelect.getSelectedItem())) {
                    continue;
                }
                
                int damaged = getDamaged(a1);
                int replaced = getReplaced(a1);
                String line1 = a1 + "\t" + a2 + "\t" + a4 + "\t" + damaged + "\t" + replaced;
                String data[] = line1.split("\t");
                model.addRow(data);
            }
            sc.close();
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
    }
    
    public int getDamaged(String id) throws FileNotFoundException{
        
        int totalDamaged = 0;
        Scanner sc = new Scanner (new FileReader("src\\Damaged.txt"));
        
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id1 = linereader.next();
            String name = linereader.next();
            String brand = linereader.next();
            int pieces = linereader.nextInt();
            
            if (id1.equals(id)){
                totalDamaged = totalDamaged + pieces;
            }
        }
        
        return totalDamaged;
    }
    public int getReplaced(String id) throws FileNotFoundException{
        
        int totalReplaced = 0;
        Scanner sc = new Scanner (new FileReader("src\\Replaced.txt"));
        
        while (sc.hasNextLine()){
            String line = sc.nextLine();
            if (line.equals("")){
                continue;
            }
            Scanner linereader = new Scanner (line);
            String id1 = linereader.next();
            String name = linereader.next();
            String brand = linereader.next();
            int pieces = linereader.nextInt();
            
            if (id1.equals(id)){
                totalReplaced = totalReplaced + pieces;
            }
        }
        
        return totalReplaced;
    }
    public void home() throws FileNotFoundException{
        MainFrame mf = new MainFrame();
        mf.show();
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Add1;
    private javax.swing.JTextField BrandName;
    private javax.swing.JTextField BrandName1;
    private javax.swing.JComboBox<String> BrandSelect;
    private javax.swing.JComboBox<String> ProdIDSelect;
    private javax.swing.JComboBox<String> ProdIDSelect1;
    private javax.swing.JComboBox<String> ProdNameSelect;
    private javax.swing.JComboBox<String> ProdNameSelect1;
    private javax.swing.JButton home;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pieces;
    private javax.swing.JTextField pieces1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
